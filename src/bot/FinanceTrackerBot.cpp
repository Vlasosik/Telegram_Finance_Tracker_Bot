#include "bot/FinanceTrackerBot.h"

#include <tgbot/net/TgLongPoll.h>

FinanceTrackerBot::FinanceTrackerBot(const std::string &token) : bot(token) {
    setUp();
}

[[noreturn]] void FinanceTrackerBot::run() const {
    TgBot::TgLongPoll long_poll(bot);
    std::cout << bot.getApi().getMyName()->name << ": started.\n";
    while (true) {
        long_poll.start();
    }
}

void FinanceTrackerBot::setUp() {
    bot.getEvents().onCommand("start", [this](const TgBot::Message::Ptr &message) {
        bot.getApi().sendMessage(message->chat->id,
                                 "–í–∞—Å –≤—ñ—Ç–∞—î —Ç–µ–ª–µ–≥—Ä–∞–º —è–∫–∏–π –¥–æ–ø–æ–º–æ–∂–µ –∫—Ä–∞—â–µ –∫–µ—Ä—É–≤–∞—Ç–∏ –≤–∞—à–∏–º–∏ —Ñ—ñ–Ω–∞–Ω–∞—Å–∞–º–∏.");
        sendMainBar(message->chat->id);
    });
    bot.getEvents().onCallbackQuery([this](const TgBot::CallbackQuery::Ptr &query) {
        auto dataFromUser = query->data;
        if (dataFromUser == "–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó") {
            sendCategoryBar(query->message->chat->id);
        } else if (dataFromUser == "–ù–∞–∑–∞–¥") {
            sendMainBar(query->message->chat->id);
        }else {
            addCategory(query->message->chat->id, dataFromUser);
        }
    });
}

void FinanceTrackerBot::addCategory(int64_t userId, const std::string &category) {
    auto range = chosenCategories.equal_range(userId);
    for (auto it = range.first; it != range.second; ++it) {
        if (it->second == category) {
            bot.getApi().sendMessage(userId, "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è \"" + category + "\" –≤–∂–µ –±—É–ª–∞ –¥–æ–¥–∞–Ω–∞.");
            return;
        }
    }
    chosenCategories.emplace(userId, category);
    bot.getApi().sendMessage(userId, "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è \"" + category + "\" –¥–æ–¥–∞–Ω–∞ –¥–æ –≤–∏–±—Ä–∞–Ω–∏—Ö.");
}


void FinanceTrackerBot::sendMainBar(int64_t userId) const {
    const auto keyboard = std::make_shared<TgBot::InlineKeyboardMarkup>();
    std::vector<std::string> buttonCategory{"–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó", "–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç–∞–º–∏", "–î–æ–ø–æ–º–æ–≥–∞"};
    for (const auto &nameButton: buttonCategory) {
        const auto button = std::make_shared<TgBot::InlineKeyboardButton>();
        button->text = nameButton;
        button->callbackData = nameButton;
        keyboard->inlineKeyboard.push_back({button});
    }
    auto message = bot.getApi().sendMessage(
        userId, "–í–∏–±–µ—Ä—ñ—Ç—å —â–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å:",
        nullptr, nullptr, keyboard);
}

void FinanceTrackerBot::sendCategoryBar(int64_t userId) const {
    const auto keyboard = std::make_shared<TgBot::InlineKeyboardMarkup>();

    auto buttonFood = std::make_shared<TgBot::InlineKeyboardButton>();
    buttonFood->text = "–á–∂–∞";
    buttonFood->callbackData = "Food";
    auto buttonHousing = std::make_shared<TgBot::InlineKeyboardButton>();
    buttonHousing->text = "–ñ–∏—Ç–ª–æ";
    buttonHousing->callbackData = "Housing";

    keyboard->inlineKeyboard.push_back({buttonFood, buttonHousing});

    auto buttonClothingAndFootwear = std::make_shared<TgBot::InlineKeyboardButton>();
    buttonClothingAndFootwear->text = "–û–¥—è–≥ —Ç–∞ –≤–∑—É—Ç—Ç—è";
    buttonClothingAndFootwear->callbackData = "Clothing and Footwear";

    const auto buttonTransport = std::make_shared<TgBot::InlineKeyboardButton>();
    buttonTransport->text = "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç";
    buttonTransport->callbackData = "Transport";
    keyboard->inlineKeyboard.push_back({buttonClothingAndFootwear, buttonTransport});


    auto buttonFamilyAndChildren = std::make_shared<TgBot::InlineKeyboardButton>();
    buttonFamilyAndChildren->text = "–°—ñ–º º—è —Ç–∞ –¥—ñ—Ç–∏";
    buttonFamilyAndChildren->callbackData = "Family and children";

    auto buttonPersonalExpenses = std::make_shared<TgBot::InlineKeyboardButton>();
    buttonPersonalExpenses->text = "–û—Å–æ–±–∏—Å—Ç—ñ –≤–∏—Ç—Ä–∞—Ç–∏";
    buttonPersonalExpenses->callbackData = "Personal expenses";
    keyboard->inlineKeyboard.push_back({buttonFamilyAndChildren, buttonPersonalExpenses});

    const auto buttonSavings = std::make_shared<TgBot::InlineKeyboardButton>();
    buttonSavings->text = "–ù–∞–∫–æ–ø–∏—á–µ–Ω–Ω—è";
    buttonSavings->callbackData = "Savings";

    auto buttonEducationAndSelfDevelopment = std::make_shared<TgBot::InlineKeyboardButton>();
    buttonEducationAndSelfDevelopment->text = "–û—Å–≤—ñ—Ç–∞ —Ç–∞ —Ä–æ–∑–≤–∏—Ç–æ–∫";
    buttonEducationAndSelfDevelopment->callbackData = "Education and development";
    keyboard->inlineKeyboard.push_back({buttonPersonalExpenses, buttonEducationAndSelfDevelopment});

    auto buttonBack = std::make_shared<TgBot::InlineKeyboardButton>();
    buttonBack->text = "–ù–∞–∑–∞–¥";
    buttonBack->callbackData = "–ù–∞–∑–∞–¥";
    keyboard->inlineKeyboard.push_back({buttonBack});

    auto message = bot.getApi().sendMessage(
        userId, "–í–∏–±–µ—Ä—ñ—Ç—å –ø–æ–∑–∏—Ü—ñ—é –∞–±–æ –¥–µ–∫—ñ–ª—å–∫–∞ –ø–æ–∑–∏—Ü—ñ–π –¥–ª—è –≤—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É–≤–∞–Ω–Ω—è –≤–∞—à–∏—Ö —Ñ—ñ–Ω–∞–Ω—Å—ñ–≤üòä",
        nullptr, nullptr, keyboard);
}
