#include "bot/ui_manager/UIManager.h"

void UIManager::sendMainBar(const TgBot::Bot &bot, int64_t userId) {
    const auto keyboard = std::make_shared<TgBot::InlineKeyboardMarkup>();
    for (const std::vector<std::string> buttons{"–î–æ—Å—Ç—É–ø–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó", "–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏", "–î–æ–ø–æ–º–æ–≥–∞"};
         const auto &button: buttons) {
        auto createInlineButton = std::make_shared<TgBot::InlineKeyboardButton>();
        createInlineButton->text = button;
        createInlineButton->callbackData = button;
        keyboard->inlineKeyboard.push_back({createInlineButton});
    }
    auto message = bot.getApi().sendMessage(
        userId, "–û–±–µ—Ä—ñ—Ç—å —â–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å üëáüèª", nullptr, nullptr, keyboard
    );
}

void UIManager::sendCategoryBar(const TgBot::Bot &bot, int64_t userId) {
    const auto keyboard = std::make_shared<TgBot::InlineKeyboardMarkup>();

    auto buttonFood = std::make_shared<TgBot::InlineKeyboardButton>();
    buttonFood->text = "–á–∂–∞";
    buttonFood->callbackData = "–á–∂–∞";
    auto buttonHousing = std::make_shared<TgBot::InlineKeyboardButton>();
    buttonHousing->text = "–ñ–∏—Ç–ª–æ";
    buttonHousing->callbackData = "–ñ–∏—Ç–ª–æ";

    keyboard->inlineKeyboard.push_back({buttonFood, buttonHousing});

    auto buttonClothingAndFootwear = std::make_shared<TgBot::InlineKeyboardButton>();
    buttonClothingAndFootwear->text = "–û–¥—è–≥ —Ç–∞ –≤–∑—É—Ç—Ç—è";
    buttonClothingAndFootwear->callbackData = "–û–¥—è–≥ —Ç–∞ –≤–∑—É—Ç—Ç—è";

    const auto buttonTransport = std::make_shared<TgBot::InlineKeyboardButton>();
    buttonTransport->text = "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç";
    buttonTransport->callbackData = "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç";
    keyboard->inlineKeyboard.push_back({buttonClothingAndFootwear, buttonTransport});


    auto buttonFamilyAndChildren = std::make_shared<TgBot::InlineKeyboardButton>();
    buttonFamilyAndChildren->text = "–°—ñ–º º—è —Ç–∞ –¥—ñ—Ç–∏";
    buttonFamilyAndChildren->callbackData = "–°—ñ–º º—è —Ç–∞ –¥—ñ—Ç–∏";

    auto buttonPersonalExpenses = std::make_shared<TgBot::InlineKeyboardButton>();
    buttonPersonalExpenses->text = "–û—Å–æ–±–∏—Å—Ç—ñ –≤–∏—Ç—Ä–∞—Ç–∏";
    buttonPersonalExpenses->callbackData = "–û—Å–æ–±–∏—Å—Ç—ñ –≤–∏—Ç—Ä–∞—Ç–∏";
    keyboard->inlineKeyboard.push_back({buttonFamilyAndChildren, buttonPersonalExpenses});

    const auto buttonSavings = std::make_shared<TgBot::InlineKeyboardButton>();
    buttonSavings->text = "–ù–∞–∫–æ–ø–∏—á–µ–Ω–Ω—è";
    buttonSavings->callbackData = "–ù–∞–∫–æ–ø–∏—á–µ–Ω–Ω—è";

    auto buttonEducationAndSelfDevelopment = std::make_shared<TgBot::InlineKeyboardButton>();
    buttonEducationAndSelfDevelopment->text = "–û—Å–≤—ñ—Ç–∞ —Ç–∞ —Ä–æ–∑–≤–∏—Ç–æ–∫";
    buttonEducationAndSelfDevelopment->callbackData = "–û—Å–≤—ñ—Ç–∞ —Ç–∞ —Ä–æ–∑–≤–∏—Ç–æ–∫";
    keyboard->inlineKeyboard.push_back({buttonSavings, buttonEducationAndSelfDevelopment});

    auto buttonBack = std::make_shared<TgBot::InlineKeyboardButton>();
    buttonBack->text = "–ù–∞–∑–∞–¥";
    buttonBack->callbackData = "–ù–∞–∑–∞–¥";
    keyboard->inlineKeyboard.push_back({buttonBack});

    auto message = bot.getApi().sendMessage(
        userId, "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —è–∫—ñ –≤–∞—Å —Ü—ñ–∫–∞–≤–ª—è—Ç—å ‚úÖ",
        nullptr, nullptr, keyboard);
}

void UIManager::sendCategoryManagementBar(const TgBot::Bot &bot, int64_t userId) {
    const auto keyboard = std::make_shared<TgBot::InlineKeyboardMarkup>();
    for (const std::vector<std::string> buttons{
             "–î–æ–¥–∞—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é", "–í–∏–¥–∞–ª–∏—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é", "–û–Ω–æ–≤–∏—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é",
             "–°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π", "–ó–≤—ñ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π", "–ù–∞–∑–∞–¥"
         };
         const auto &button: buttons) {
        auto createInlineButton = std::make_shared<TgBot::InlineKeyboardButton>();
        createInlineButton->text = button;
        createInlineButton->callbackData = button;
        keyboard->inlineKeyboard.push_back({createInlineButton});
    }
    auto message = bot.getApi().sendMessage(userId, "–û–±–µ—Ä—ñ—Ç—å —â–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—åüëáüèª",
                                            nullptr, nullptr, keyboard);
}

void UIManager::sendReportTransactionBar(const TgBot::Bot &bot, int64_t userId) {
    const auto keyboard = std::make_shared<TgBot::InlineKeyboardMarkup>();
    for (const std::vector<std::string> buttons{
             "–°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∑–∞ —Ç–∏–∂–¥–µ–Ω—å", "–°—É–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∑–∞ —Ç–∏–∂–¥–µ–Ω—å",
             "–°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∑–∞ –º—ñ—Å—è—Ü—å", "–°—É–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∑–∞ –º—ñ—Å—è—Ü—å", "–ù–∞–∑–∞–¥"
         };
         const auto &button: buttons) {
        auto createInlineButton = std::make_shared<TgBot::InlineKeyboardButton>();
        createInlineButton->text = button;
        createInlineButton->callbackData = button;
        keyboard->inlineKeyboard.push_back({createInlineButton});
    }
    auto message = bot.getApi().sendMessage(userId, "–û–±–µ—Ä—ñ—Ç—å –∑–≤—ñ—Ç —è–∫–∏–π –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—åüëáüèª",
                                            nullptr, nullptr, keyboard);
}
